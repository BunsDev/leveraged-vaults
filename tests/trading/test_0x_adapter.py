
import pytest
import brownie
from brownie import Wei, accounts, network, TradingModule
from brownie.network.state import Chain
from scripts.common import (
    DEX_ID, 
    TRADE_TYPE, 
    set_dex_flags, 
    set_trade_type_flags
)
from scripts.EnvironmentConfig import getEnvironment

chain = Chain()

@pytest.fixture(autouse=True)
def run_around_tests():
    chain.snapshot()
    yield
    chain.revert()

def test_COMP_to_WETH_exact_in():
    env = getEnvironment(network.show_active())
    amount = Wei(200e18)
    env.tokens["COMP"].transfer(env.tradingModule, amount, {"from": env.whales["COMP"]})
    impl = TradingModule.deploy(env.notional.address, env.tradingModule.address, {"from": env.notional.owner()})
    env.tradingModule.upgradeTo(impl.address, {"from": env.notional.owner()})

    tradeData = "0x415565b0000000000000000000000000c00e94cb662c3520282e6f5717214004a7f26888000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000ad78ebc5ac62000000000000000000000000000000000000000000000000000004d41588e3cc8a83600000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000076000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00e94cb662c3520282e6f5717214004a7f26888000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000720000000000000000000000000000000000000000000000000000000000000072000000000000000000000000000000000000000000000000000000000000006a000000000000000000000000000000000000000000000000ad78ebc5ac6200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000001942616c616e6365725632000000000000000000000000000000000000000000000000000000000001ab02445cbc04e94e0000000000000000000000000000000000000000000000000bdf9b66bd9a2374000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c80000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020efaa1604e82e1b3af8430b90192c1b9e8197e37700020000000000000000002100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c00e94cb662c3520282e6f5717214004a7f26888000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000253757368695377617000000000000000000000000000000000000000000000000000000000000007818a33a14e162d6500000000000000000000000000000000000000000000000035776054163897c2000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000d9e1ce17f2641f24ae83637ab66a2cca9c378b9f00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c00e94cb662c3520282e6f5717214004a7f26888000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000c43727970746f436f6d00000000000000000000000000000000000000000000000000000000000001ab02445cbc04e94e0000000000000000000000000000000000000000000000000bea5cd368f5ed01000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000ceb90e4c17d626be0facd78b79c9c87d7ca181b300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c00e94cb662c3520282e6f5717214004a7f26888000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c00e94cb662c3520282e6f5717214004a7f26888000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd00000000000000000000000010000000000000000000000000000000000000110000000000000000000000000000000000000000000000d97b5622726398dfa8"
    trade = [
        TRADE_TYPE["EXACT_IN_SINGLE"], 
        env.tokens["COMP"], 
        env.tokens["WETH"], 
        amount, 
        0, 
        chain.time(), 
        tradeData
    ]
    # Vault does not have permission to sell wstETH
    with brownie.reverts():
        env.tradingModule.executeTrade.call(DEX_ID["ZERO_EX"], trade, {"from": accounts[0]})

    # Give vault permission to sell wstETH
    env.tradingModule.setTokenPermissions(
        env.tradingModule.address, 
        env.tokens["COMP"].address, 
        [True, set_dex_flags(0, ZERO_EX=True), set_trade_type_flags(0, EXACT_IN_SINGLE=True)], 
        {"from": env.notional.owner()})

    compBefore = env.tokens["COMP"].balanceOf(env.tradingModule)
    wethBefore = env.tokens["WETH"].balanceOf(env.tradingModule)
    ret = env.tradingModule.executeTrade(DEX_ID["ZERO_EX"], trade, {"from": accounts[0]})
    assert ret.return_value[0] == compBefore - env.tokens["COMP"].balanceOf(env.tradingModule)
    assert ret.return_value[1] == env.tokens["WETH"].balanceOf(env.tradingModule) - wethBefore
